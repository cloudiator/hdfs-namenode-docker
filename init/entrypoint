#!/bin/bash

# include bpkg  dependencies
source /usr/local/bin/retry
source /usr/local/bin/bgo
source /usr/local/bin/bgowait

# global variables
GLOBAL_VAR="xyz"

##############################################################################
# validate if all container variables are set
##############################################################################
function validate(){
    echo "starting validate!"
    vars="HDFS_NAMENODE_PORT"
    for var in $vars; do
        if [[ $(env | awk -F "=" '{print $1}' | grep "^$var$") != "$var" ]]; then
            echo "$var not set but required."
            return 1
        fi
    done
    if [[ -z ${GLOBAL_VAR+x} ]]; then
        echo "GLOBAL_VAR variable cannot be looked up."
        return 1
    fi       
}


##############################################################################
# write config vars with configfile template
##############################################################################
function writeConfigOptions(){
    echo "write config options"
    export HDFS_NAMENODE_IPADDRESS=0.0.0.0
    export HDFS_NAMENODE_PORT=$HDFS_NAMENODE_PORT
    export HADOOP_VERSION=2.9.0
    export HADOOP_HOME=/usr/share/hadoop-$HADOOP_VERSION
    export HADOOP_CONF_DIR=$HADOOP_HOME/etc/hadoop
    export JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
}

function init(){

    writeConfigOptions
}

##############################################################################

function hdfs_namenode_service(){
    echo "starting HDFS Namenode!"
    sed "s/__MELODIC_HDFS_NAMENODE_IP_ADDRESS__:__MELODIC_HDFS_NAMENODE_PORT__/${HDFS_NAMENODE_IPADDRESS}:${HDFS_NAMENODE_PORT}/g" < $HADOOP_CONF_DIR/core-site.xml.default > $HADOOP_CONF_DIR/core-site.xml
    sed "s/__MELODIC_HDFS_NAMENODE_IP_ADDRESS__/${HDFS_NAMENODE_IPADDRESS}/g" < $HADOOP_CONF_DIR/hdfs-site.xml.default > $HADOOP_CONF_DIR/hdfs-site.xml

    # format
    ${HADOOP_HOME}/bin/hdfs namenode -format
    ${HADOOP_HOME}/bin/hdfs --config  $HADOOP_CONF_DIR namenode
    # whatever blocking call 
    tail -f /dev/null
}

function start(){
    echo "starting start!"
    bgo hdfs_namenode_service
    if [[ $? != 0 ]]; then
        echo "start failed. exiting now." >&2
        exit 1
    fi
}

##############################################################################
function configure(){
    echo "configure: ..."
    ## post-start configuration via service
}

##############################################################################
function main(){
    # validate env vars
    echo "starting main!"
    validate
    if [[ $? != 0 ]]; then 
        echo "validation failed. exiting now." >&2
        exit 1
    fi

    # initialize
    init
    if [[ $? != 0 ]]; then 
        echo "init failed. exiting now." >&2
        exit 1
    fi

    # start
    start 
    if [[ $? != 0 ]]; then
        echo "start failed. exiting now." >&2
        exit 1
    fi    

    # configure
    retry 5 5 "configure failed." configure
    if [[ $? != 0 ]]; then
        echo "cannot run configure." >&2
        exit 1
    fi

    # wait
    echo "done. now waiting for services."
    #freq=5; waitForN=-1; killTasks=0 # fail one, ignore (development mode)
    freq=5; waitForN=1; killTasks=1 #fail one, fail all (production mode)
    bgowait $freq $waitForN $killTasks
}

if [[ "$1" == "" ]]; then
    main
else
    exec "$@"
fi
